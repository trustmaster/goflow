# PE Grammar for PE Grammars
#
# Modified by J. Lemke, extraordinaire.
#
# Adapted from [1] by Ian Piumarta <first-name at last-name point com>.
#
# Best viewed using 140 columns monospaced with tabs every 8.
#
# [1] Bryan Ford.  "Parsing Expression Grammars: A Recognition-Based Syntactic
#     Foundation."  Symposium on Principles of Programming Languages,
#     January 14--16, 2004, Venice, Italy.

package flow2

import (
    "github.com/Synthace/goflow"
)

# parser declaration

type JLPeg Peg {
 
}

# Hierarchical syntax

runtimeGetruntime    <-    'runtime'Dot'getruntime'    { runtimeGetruntime() }
runtimeRuntime    <-    'runtime'Dot'runtime'    { p.runtimeRuntime() }
runtimePorts    <-    'runtime'Dot'ports'    { p.runtimePorts() }
runtimePacket    <-    'runtime'Dot'packet'    { p.runtimePacket() }
graphClear    <-    'graph'Dot'clear'    { p.graphClear() }
graphAddnode    <-    'graph'Dot'addnode'    { p.graphAddnode() }
graphRemovenode    <-    'graph'Dot'removenode'    { p.graphRemovenode() }
graphRenamenode    <-    'graph'Dot'renamenode'    { p.graphRenamenode() }
graphChangenode    <-    'graph'Dot'changenode'    { p.graphChangenode() }
graphAddedge    <-    'graph'Dot'addedge'    { p.graphAddedge() }
graphRemoveedge    <-    'graph'Dot'removeedge'    { p.graphRemoveedge() }
graphChangeedge    <-    'graph'Dot'changeedge'    { p.graphChangeedge() }
graphAddinitial    <-    'graph'Dot'addinitial'    { p.graphAddinitial() }
graphRemoveinitial    <-    'graph'Dot'removeinitial'    { p.graphRemoveinitial() }
graphAddinport    <-    'graph'Dot'addinport'    { p.graphAddinport() }
graphRemoveinport    <-    'graph'Dot'removeinport'    { p.graphRemoveinport() }
graphRenameinport    <-    'graph'Dot'renameinport'    { p.graphRenameinport() }
graphAddoutport    <-    'graph'Dot'addoutport'    { p.graphAddoutport() }
graphRemoveoutport    <-    'graph'Dot'removeoutport'    { p.graphRemoveoutport() }
graphRenameoutport    <-    'graph'Dot'renameoutport'    { p.graphRenameoutport() }
graphAddgroup    <-    'graph'Dot'addgroup'    { p.graphAddgroup() }
graphRemovegroup    <-    'graph'Dot'removegroup'    { p.graphRemovegroup() }
graphRenamegroup    <-    'graph'Dot'renamegroup'    { p.graphRenamegroup() }
graphChangegroup    <-    'graph'Dot'changegroup'    { p.graphChangegroup() }
componentList    <-    'component'Dot'list'    { p.componentList() }
componentComponent    <-    'component'Dot'component'    { p.componentComponent() }
componentGetsource    <-    'component'Dot'getsource'    { p.componentGetsource() }
componentSource    <-    'component'Dot'source'    { p.componentSource() }
networkStart    <-    'network'Dot'start'    { p.networkStart() }
networkGetstatus    <-    'network'Dot'getstatus'    { p.networkGetstatus() }
networkStop    <-    'network'Dot'stop'    { p.networkStop() }
networkStarted    <-    'network'Dot'started'    { p.networkStarted() }
networkStatus    <-    'network'Dot'status'    { p.networkStatus() }
networkStopped    <-    'network'Dot'stopped'    { p.networkStopped() }
networkDebug    <-    'network'Dot'debug'    { p.networkDebug() }
networkIcon    <-    'network'Dot'icon'    { p.networkIcon() }
networkOutput    <-    'network'Dot'output'    { p.networkOutput() }
networkError    <-    'network'Dot'error'    { p.networkError() }
networkProcesserror    <-    'network'Dot'processerror'    { p.networkProcesserror() }
networkConnect    <-    'network'Dot'connect'    { p.networkConnect() }
networkBegingroup    <-    'network'Dot'begingroup'    { p.networkBegingroup() }
networkData    <-    'network'Dot'data'    { p.networkData() }
networkEndgroup    <-    'network'Dot'endgroup'    { p.networkEndgroup() }
networkDisconnect    <-    'network'Dot'disconnect'    { p.networkDisconnect() }
networkEdges    <-    'network'Dot'edges'    { p.networkEdges() }